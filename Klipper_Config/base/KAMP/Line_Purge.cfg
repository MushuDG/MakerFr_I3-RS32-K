[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    # Retrieve printer parameters
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}  # Convert velocity (mm/s) to speed (mm/min)
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}  # Max cross-section for purge check

    # Set retraction G-code depending on whether firmware retraction is enabled
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Load purge parameters from _KAMP_Settings macro
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
    {% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
    {% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
    {% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
    {% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}

    # Compute purge area based on the bounding box of printed objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}

    # Calculate center points for the purge line (in X or Y direction)
    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}

    # Calculate origin points with margin, clamped to non-negative values
    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}

    # Estimate the purge movement speed from the flow rate
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    # Skip purge if cross-section is too low for meaningful flow
    {% if cross_section < 5 %}
        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}

    {% else %}

        # Optional verbose information
        {% if verbose_enable == True %}
            {action_respond_info("Moving filament tip {}mms".format((tip_distance))) }
        {% endif %}

        # Inform about retraction mode
        {% if printer.firmware_retraction is defined %}
            {action_respond_info("KAMP purge is using firmware retraction.")}
        {% else %}
            {action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
        {% endif %}

        # Verbose info about purge position and settings
        {% if purge_y_origin > 0 %}
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
                (purge_x_center),
                (purge_y_origin),
                (purge_amount),
                (flow_rate),
            )) }
        {% else %}
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm3/s.".format(
                (purge_x_origin),
                (purge_y_center),
                (purge_amount),
                (flow_rate),
            )) }
        {% endif %}

        # Save printer state before purge
        SAVE_GCODE_STATE NAME=Prepurge_State

        {% if purge_y_origin > 0 %}
            # Purge along X axis (in front of the print area)
            G92 E0
            G0 F{travel_speed}
            G90
            G0 X{purge_x_center} Y{purge_y_origin}
            G0 Z{purge_height}
            M83
            G1 E{tip_distance} F{purge_move_speed}
            G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
            {RETRACT}
            G0 X{purge_x_center + purge_amount + 10} F{travel_speed}
            G92 E0
            M82
            G0 Z{purge_height * 2} F{travel_speed}
        {% else %}
            # Purge along Y axis (to the left of the print area)
            G92 E0
            G0 F{travel_speed}
            G90
            G0 X{purge_x_origin} Y{purge_y_center}
            G0 Z{purge_height}
            M83
            G1 E{tip_distance} F{purge_move_speed}
            G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
            {RETRACT}
            G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}
            G92 E0
            M82
            G0 Z{purge_height * 2} F{travel_speed}
        {% endif %}

        # Restore state after purge
        RESTORE_GCODE_STATE NAME=Prepurge_State

    {% endif %}