[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:

    # Gather all polygon points from objects marked with EXCLUDE_OBJECT
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}

    # Retrieve mesh configuration settings from config
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}

    # Load user-defined parameters from the _KAMP_Settings macro
    {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
    {% set verbose_enable = kamp_settings.verbose_enable | abs %}
    {% set probe_dock_enable = kamp_settings.probe_dock_enable | abs %}
    {% set attach_macro = kamp_settings.attach_macro | string %}
    {% set detach_macro = kamp_settings.detach_macro | string %}
    {% set mesh_margin = kamp_settings.mesh_margin | float %}
    {% set fuzz_amount = kamp_settings.fuzz_amount | float %}
    {% set probe_density_factor = kamp_settings.probe_density_factor | default(1.5) | float %}  # Factor to increase probe point density

    # Ensure probe_count has both X and Y components
    {% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2 %}

    # Calculate max distance between probe points based on config
    {% set max_probe_point_distance_x = (bed_mesh_max[0] - bed_mesh_min[0]) / (probe_count[0] - 1) %}
    {% set max_probe_point_distance_y = (bed_mesh_max[1] - bed_mesh_min[1]) / (probe_count[1] - 1) %}

    # Determine bounding box (min/max X and Y) from all objects
    {% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
    {% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
    {% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
    {% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}

    # Apply random fuzzing (optional) to avoid repeated exact points
    {% set fuzz_range = range(0, (fuzz_amount * 100) | int + 1) %}
    {% set adapted_x_min = [x_min - mesh_margin - (fuzz_range | random / 100.0), bed_mesh_min[0]] | max %}
    {% set adapted_y_min = [y_min - mesh_margin - (fuzz_range | random / 100.0), bed_mesh_min[1]] | max %}
    {% set adapted_x_max = [x_max + mesh_margin + (fuzz_range | random / 100.0), bed_mesh_max[0]] | min %}
    {% set adapted_y_max = [y_max + mesh_margin + (fuzz_range | random / 100.0), bed_mesh_max[1]] | min %}

    # Calculate number of probe points in X and Y based on density factor
    {% set points_x = ((((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) * probe_density_factor) | round(method='ceil') | int) + 1 %}
    {% set points_y = ((((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) * probe_density_factor) | round(method='ceil') | int) + 1 %}

    # Choose mesh algorithm based on grid resolution
    {% if ([points_x, points_y] | max) > 6 %}
        {% set algorithm = "bicubic" %}
        {% set min_points = 4 %}
    {% else %}
        {% set algorithm = "lagrange" %}
        {% set min_points = 3 %}
    {% endif %}

    # Ensure minimum and maximum bounds for point counts
    {% set points_x = [points_x, min_points] | max %}
    {% set points_y = [points_y, min_points] | max %}
    {% set points_x = [points_x, probe_count[0] * probe_density_factor | round | int] | min %}
    {% set points_y = [points_y, probe_count[1] * probe_density_factor | round | int] | min %}

    # Optional verbose logging of computed parameters
    {% if verbose_enable %}
        { action_respond_info("Algorithm: {}.".format(algorithm)) }
        { action_respond_info("Default probe count: {},{}.".format(probe_count[0], probe_count[1])) }
        { action_respond_info("Adapted probe count: {},{}.".format(points_x, points_y)) }
        { action_respond_info("Adapted mesh bounds: {}, {}.".format((adapted_x_min, adapted_y_min), (adapted_x_max, adapted_y_max))) }
        { action_respond_info("Probe density factor applied: {}.".format(probe_density_factor)) }
    {% endif %}

    # Run attach macro if probe docking is enabled
    {% if probe_dock_enable %}
        {attach_macro}
    {% endif %}

    # Launch the adapted BED_MESH_CALIBRATE with calculated parameters
    _BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}

    # Run detach macro if probe docking is enabled
    {% if probe_dock_enable %}
        {detach_macro}
    {% endif %}
